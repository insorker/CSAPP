!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Accept	src/csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	src/csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Bind	src/csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
CHUNKSIZE	vm/malloc/mm.c	23;"	d	file:
CLEARCACHE	mem/matmult/mm.c	9;"	d	file:
CONVERT	ecf/rfork.c	16;"	d	file:
Calloc	src/csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	src/csapp.c	/^void Close(int fd) $/;"	f
Connect	src/csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
DATA_NAME	opt/combine.h	14;"	d
DATA_NAME	opt/combine.h	21;"	d
DATA_NAME	opt/combine.h	26;"	d
DATA_NAME	opt/combine.h	31;"	d
DATA_NAME	opt/combine.h	3;"	d
DATA_NAME	opt/combine.h	8;"	d
DEF_MODE	include/csapp.h	30;"	d
DEF_UMASK	include/csapp.h	31;"	d
DSIZE	vm/malloc/mm.c	22;"	d	file:
Dup2	src/csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Elf32_Rel	link/elfstructs.c	/^} Elf32_Rel; $/;"	t	typeref:struct:__anon3	file:
Elf_Symbol	link/elfstructs.c	/^} Elf_Symbol; $/;"	t	typeref:struct:__anon2	file:
Execve	src/csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
FTRP	vm/malloc/mm.c	40;"	d	file:
Fclose	src/csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	src/csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	src/csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	src/csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	ecf/rfork.c	/^pid_t Fork(void)$/;"	f
Fork	src/csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	src/csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	src/csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	src/csapp.c	/^void Free(void *ptr) $/;"	f
Fstat	src/csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	src/csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
GET	vm/malloc/mm.c	31;"	d	file:
GET_ALLOC	vm/malloc/mm.c	36;"	d	file:
GET_SIZE	vm/malloc/mm.c	35;"	d	file:
GET_VEC_ELEMENT	opt/vec.h	22;"	d
Gethostbyaddr	src/csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	src/csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getpgrp	src/csapp.c	/^pid_t Getpgrp(void) {$/;"	f
HDRP	vm/malloc/mm.c	39;"	d	file:
IDENT	opt/combine.h	36;"	d
IDENT	opt/combine.h	43;"	d
IDENT	opt/combine.h	47;"	d
Kill	src/csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
LISTENQ	include/csapp.h	57;"	d
Listen	src/csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	src/csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAX	vm/malloc/mm.c	25;"	d	file:
MAXARGS	ecf/shellex.c	3;"	d	file:
MAXBUF	include/csapp.h	56;"	d
MAXBYTES	mem/mountain/mountain.c	9;"	d	file:
MAXELEMS	mem/mountain/mountain.c	11;"	d	file:
MAXLINE	include/csapp.h	55;"	d
MAXSTR	conc/ctime_ts.c	5;"	d	file:
MAXSTRIDE	mem/mountain/mountain.c	10;"	d	file:
MAXTHREADS	conc/psum.c	6;"	d	file:
MAX_SLEEP	ecf/rfork.c	13;"	d	file:
MINBYTES	mem/mountain/mountain.c	8;"	d	file:
Malloc	src/csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	src/csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	src/csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
N	conc/norace.c	6;"	d	file:
N	conc/race.c	6;"	d	file:
N	conc/sharing.c	3;"	d	file:
N	ecf/waitpid1.c	3;"	d	file:
N	ecf/waitpid2.c	3;"	d	file:
NEXT_BLKP	vm/malloc/mm.c	43;"	d	file:
NEXT_FITx	vm/malloc/mm.c	17;"	d	file:
NTHREADS	conc/echoservert_pre.c	7;"	d	file:
OP	opt/combine.h	37;"	d
OP	opt/combine.h	42;"	d
OP	opt/combine.h	48;"	d
OP_NAME	opt/combine.h	39;"	d
OP_NAME	opt/combine.h	44;"	d
OP_NAME	opt/combine.h	50;"	d
Open	src/csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	src/csapp.c	/^int Open_clientfd(char *hostname, int port) $/;"	f
Open_listenfd	src/csapp.c	/^int Open_listenfd(int port) $/;"	f
P	src/csapp.c	/^void P(sem_t *sem) $/;"	f
PACK	vm/malloc/mm.c	28;"	d	file:
PREV_BLKP	vm/malloc/mm.c	44;"	d	file:
PUT	vm/malloc/mm.c	32;"	d	file:
Pause	src/csapp.c	/^void Pause() $/;"	f
Pthread_cancel	src/csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	src/csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	src/csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	src/csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	src/csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	src/csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	src/csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
RIO_BUFSIZE	include/csapp.h	41;"	d
Read	src/csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Realloc	src/csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	src/csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	src/csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	src/csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	src/csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	src/csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SA	include/csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SBUFSIZE	conc/echoservert_pre.c	8;"	d	file:
Select	src/csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	src/csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	src/csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	src/csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	src/csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	src/csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	src/csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	src/csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	src/csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	src/csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	src/csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sleep	src/csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	src/csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	src/csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
V	src/csapp.c	/^void V(sem_t *sem) $/;"	f
WSIZE	vm/malloc/mm.c	21;"	d	file:
Wait	src/csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	src/csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	src/csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
__CSAPP_H__	include/csapp.h	3;"	d
__SBUF_H__	conc/sbuf.h	2;"	d
add_client	conc/echoservers.c	/^void add_client(int connfd, pool *p) $/;"	f
addjob	ecf/procmask1.c	/^void addjob(int pid)$/;"	f
addjob	ecf/procmask2.c	/^void addjob(int pid)$/;"	f
addvec	link/addvec.c	/^void addvec(int *x, int *y,$/;"	f
allocated_len	opt/vec.h	/^    long int allocated_len; \/* NOTE: we don't use this field in the book *\/$/;"	m	struct:__anon4
app_error	src/csapp.c	/^void app_error(char *msg) \/* application error *\/$/;"	f
bar	ecf/setjmp.c	/^void bar(void) $/;"	f
binding	link/elfstructs.c	/^	 binding:4;  \/* local or global (4 bits) *\/ $/;"	m	struct:__anon2	file:
buf	conc/sbuf.h	/^    int *buf;          \/* Buffer array *\/         $/;"	m	struct:__anon5
buf	ecf/restart.c	/^sigjmp_buf buf;$/;"	v
buf	ecf/setjmp.c	/^jmp_buf buf;$/;"	v
buf	link/main.c	/^int buf[2] = {1, 2};$/;"	v
bufp0	link/swap.c	/^int *bufp0 = &buf[0];$/;"	v
bufp1	link/swap.c	/^int *bufp1;$/;"	v
builtin_command	ecf/shellex.c	/^int builtin_command(char **argv) $/;"	f
byte_cnt	conc/echo_cnt.c	/^static int byte_cnt;  \/* byte counter *\/$/;"	v	file:
byte_cnt	conc/echoservers.c	/^int byte_cnt = 0; \/* counts total bytes received by server *\/$/;"	v
byte_pointer	data/show-bytes.c	/^typedef unsigned char *byte_pointer;$/;"	t	file:
check_clients	conc/echoservers.c	/^void check_clients(pool *p) $/;"	f
checkblock	vm/malloc/mm.c	/^static void checkblock(void *bp) $/;"	f	file:
checkheap	vm/malloc/mm.c	/^void checkheap(int verbose) $/;"	f
checkresult	mem/matmult/mm.c	/^void checkresult(array c, int n)$/;"	f
clienterror	netp/tiny/tiny.c	/^void clienterror(int fd, char *cause, char *errnum, $/;"	f
clientfd	conc/echoservers.c	/^    int clientfd[FD_SETSIZE];    \/* set of active descriptors *\/$/;"	m	struct:__anon6	file:
clientrio	conc/echoservers.c	/^    rio_t clientrio[FD_SETSIZE]; \/* set of active read buffers *\/$/;"	m	struct:__anon6	file:
cnt	conc/badcnt.c	/^volatile int cnt = 0; \/* Counter *\/$/;"	v
coalesce	vm/malloc/mm.c	/^static void *coalesce(void *bp) $/;"	f	file:
combiner	opt/combine.h	/^typedef void (*combiner)(vec_ptr, data_t *);$/;"	t
command	conc/select.c	/^void command(void) {$/;"	f
counter	ecf/counterprob.c	/^int counter = 0;$/;"	v
counter	ecf/forkprob7.c	/^int counter = 1;$/;"	v
counter	ecf/signalprob0.c	/^int counter = 2;$/;"	v
ctime_ts	conc/ctime_ts.c	/^char *ctime_ts(const time_t *timep, char *privatep)$/;"	f
data	mem/mountain/mountain.c	/^double data[MAXELEMS];      \/* The global array we'll be traversing *\/$/;"	v
data	opt/vec.h	/^    data_t *data;$/;"	m	struct:__anon4
data_t	opt/combine.h	/^typedef char data_t;$/;"	t
data_t	opt/combine.h	/^typedef double data_t;$/;"	t
data_t	opt/combine.h	/^typedef float data_t;$/;"	t
data_t	opt/combine.h	/^typedef int data_t;$/;"	t
data_t	opt/combine.h	/^typedef long data_t;$/;"	t
data_t	opt/combine.h	/^typedef long double data_t;$/;"	t
deletejob	ecf/procmask1.c	/^void deletejob(int pid)$/;"	f
deletejob	ecf/procmask2.c	/^void deletejob(int pid)$/;"	f
dns_error	src/csapp.c	/^void dns_error(char *msg) \/* dns-style error *\/$/;"	f
doit	ecf/forkprob4.c	/^void doit() $/;"	f
doit	ecf/forkprob5.c	/^void doit() $/;"	f
doit	ecf/forkprob6.c	/^void doit() $/;"	f
doit	netp/tiny/tiny.c	/^void doit(int fd) $/;"	f
echo	netp/echo.c	/^void echo(int connfd) $/;"	f
echo_cnt	conc/echo_cnt.c	/^void echo_cnt(int connfd) $/;"	f
email1	vm/mm.h	/^    char *name1, *email1;$/;"	m	struct:__anon1
email2	vm/mm.h	/^    char *name2, *email2;$/;"	m	struct:__anon1
end	ecf/forkprob2.c	/^void end(void) $/;"	f
error1	ecf/setjmp.c	/^int error1 = 0; $/;"	v
error2	ecf/setjmp.c	/^int error2 = 1;$/;"	v
eval	ecf/shellex.c	/^void eval(char *cmdline) $/;"	f
extend_heap	vm/malloc/mm.c	/^static void *extend_heap(size_t words) $/;"	f	file:
find_fit	vm/malloc/mm.c	/^static void *find_fit(size_t asize)$/;"	f	file:
float_eg	data/show-bytes.c	/^void float_eg() {$/;"	f
foo	ecf/forkprob8.c	/^void foo(int n) $/;"	f
foo	ecf/setjmp.c	/^void foo(void) $/;"	f
front	conc/sbuf.h	/^    int front;         \/* buf[(front+1)%n] is first item *\/$/;"	m	struct:__anon5
ga	mem/matmult/mm.c	/^array ga, gb, gc; $/;"	v
gb	mem/matmult/mm.c	/^array ga, gb, gc; $/;"	v
gc	mem/matmult/mm.c	/^array ga, gb, gc; $/;"	v
get_filetype	netp/tiny/tiny.c	/^void get_filetype(char *filename, char *filetype) $/;"	f
get_vec_element	opt/vec.c	/^int get_vec_element(vec_ptr v, long int index, data_t *dest)$/;"	f
get_vec_start	opt/vec.c	/^data_t *get_vec_start(vec_ptr v)$/;"	f
handler	ecf/alarm.c	/^void handler(int sig) $/;"	f
handler	ecf/counterprob.c	/^void handler(int sig) $/;"	f
handler	ecf/procmask1.c	/^void handler(int sig)$/;"	f
handler	ecf/procmask2.c	/^void handler(int sig)$/;"	f
handler	ecf/restart.c	/^void handler(int sig) $/;"	f
handler	ecf/sigint1.c	/^void handler(int sig) \/* SIGINT handler *\/   \/\/line:ecf:sigint1:beginhandler$/;"	f
handler1	ecf/signal1.c	/^void handler1(int sig) $/;"	f
handler1	ecf/signalprob0.c	/^void handler1(int sig) {$/;"	f
handler2	ecf/signal2.c	/^void handler2(int sig) $/;"	f
handler2	ecf/signal3.c	/^void handler2(int sig) $/;"	f
handler2	ecf/signal4.c	/^void handler2(int sig) $/;"	f
handler_t	include/csapp.h	/^typedef void handler_t(int);$/;"	t
heap_listp	vm/malloc/mm.c	/^static char *heap_listp = 0;  \/* Pointer to first block *\/  $/;"	v	file:
ijk	mem/matmult/mm.c	/^void ijk(array A, array B, array C, int n) $/;"	f
ikj	mem/matmult/mm.c	/^void ikj(array A, array B, array C, int n) $/;"	f
init	mem/matmult/mm.c	/^void init(array a, array b, int n) $/;"	f
init_ctime_ts	conc/ctime_ts.c	/^static void init_ctime_ts(void)$/;"	f	file:
init_data	mem/mountain/mountain.c	/^void init_data(double *data, int n)$/;"	f
init_echo_cnt	conc/echo_cnt.c	/^static void init_echo_cnt(void)$/;"	f	file:
init_pool	conc/echoservers.c	/^void init_pool(int listenfd, pool *p) $/;"	f
initjobs	ecf/procmask1.c	/^void initjobs()$/;"	f
initjobs	ecf/procmask2.c	/^void initjobs()$/;"	f
items	conc/sbuf.h	/^    sem_t items;       \/* Counts available items *\/$/;"	m	struct:__anon5
jik	mem/matmult/mm.c	/^void jik(array A, array B, array C, int n) $/;"	f
jki	mem/matmult/mm.c	/^void jki(array A, array B, array C, int n)$/;"	f
kij	mem/matmult/mm.c	/^void kij(array A, array B, array C, int n)$/;"	f
kji	mem/matmult/mm.c	/^void kji(array A, array B, array C, int n)$/;"	f
len	opt/vec.h	/^    long int len;$/;"	m	struct:__anon4
main	conc/badcnt.c	/^int main(int argc, char **argv) $/;"	f
main	conc/ctime_ts.c	/^int main()$/;"	f
main	conc/echoserverp.c	/^int main(int argc, char **argv) $/;"	f
main	conc/echoservers.c	/^int main(int argc, char **argv)$/;"	f
main	conc/echoservert.c	/^int main(int argc, char **argv) $/;"	f
main	conc/echoservert_pre.c	/^int main(int argc, char **argv) $/;"	f
main	conc/hello.c	/^int main()                                    \/\/line:conc:hello:main$/;"	f
main	conc/hellobug.c	/^int main() $/;"	f
main	conc/norace.c	/^int main() $/;"	f
main	conc/psum.c	/^int main(int argc, char **argv) $/;"	f
main	conc/race.c	/^int main() $/;"	f
main	conc/rand.c	/^int main()$/;"	f
main	conc/rand_r.c	/^int main()$/;"	f
main	conc/select.c	/^int main(int argc, char **argv) $/;"	f
main	conc/sharing.c	/^int main() $/;"	f
main	conc/tfgets-main.c	/^int main() $/;"	f
main	data/show-bytes.c	/^int main(int argc, char *argv[])$/;"	f
main	ecf/alarm.c	/^int main() $/;"	f
main	ecf/counterprob.c	/^int main() $/;"	f
main	ecf/fork.c	/^int main() $/;"	f
main	ecf/forkprob0.c	/^int main() $/;"	f
main	ecf/forkprob1.c	/^int main() $/;"	f
main	ecf/forkprob2.c	/^int main() $/;"	f
main	ecf/forkprob3.c	/^int main() $/;"	f
main	ecf/forkprob4.c	/^int main() $/;"	f
main	ecf/forkprob5.c	/^int main() $/;"	f
main	ecf/forkprob6.c	/^int main() $/;"	f
main	ecf/forkprob7.c	/^int main() $/;"	f
main	ecf/forkprob8.c	/^int main(int argc, char **argv)$/;"	f
main	ecf/kill.c	/^int main() $/;"	f
main	ecf/procmask1.c	/^int main(int argc, char **argv)$/;"	f
main	ecf/procmask2.c	/^int main(int argc, char **argv)$/;"	f
main	ecf/restart.c	/^int main() $/;"	f
main	ecf/setjmp.c	/^int main() $/;"	f
main	ecf/shellex.c	/^int main() $/;"	f
main	ecf/sigint1.c	/^int main() $/;"	f
main	ecf/signal1.c	/^int main() $/;"	f
main	ecf/signal2.c	/^int main() $/;"	f
main	ecf/signal3.c	/^int main() {$/;"	f
main	ecf/signal4.c	/^int main() $/;"	f
main	ecf/signalprob0.c	/^int main() {$/;"	f
main	ecf/waitpid1.c	/^int main() $/;"	f
main	ecf/waitpid2.c	/^int main() $/;"	f
main	ecf/waitprob0.c	/^int main() $/;"	f
main	ecf/waitprob1.c	/^int main() $/;"	f
main	ecf/waitprob3.c	/^int main() $/;"	f
main	intro/hello.c	/^int main() $/;"	f
main	io/cpfile.c	/^int main(int argc, char **argv) $/;"	f
main	io/cpstdin.c	/^int main(void) $/;"	f
main	io/statcheck.c	/^int main (int argc, char **argv) $/;"	f
main	link/dll.c	/^int main() $/;"	f
main	link/main.c	/^int main() $/;"	f
main	link/main2.c	/^int main() $/;"	f
main	mem/matmult/mm.c	/^int main()$/;"	f
main	mem/mountain/mountain.c	/^int main()$/;"	f
main	netp/echoclient.c	/^int main(int argc, char **argv) $/;"	f
main	netp/echoserveri.c	/^int main(int argc, char **argv) $/;"	f
main	netp/hostinfo.c	/^int main(int argc, char **argv) $/;"	f
main	netp/tiny/cgi-bin/adder.c	/^int main(void) {$/;"	f
main	netp/tiny/tiny.c	/^int main(int argc, char **argv) $/;"	f
maxfd	conc/echoservers.c	/^    int maxfd;        \/* largest descriptor in read_set *\/   $/;"	m	struct:__anon6	file:
maxi	conc/echoservers.c	/^    int maxi;         \/* highwater index into client array *\/$/;"	m	struct:__anon6	file:
mem_brk	vm/malloc/memlib.c	/^static char *mem_brk;      \/* Points to last byte of heap plus 1 *\/$/;"	v	file:
mem_deinit	vm/malloc/memlib.c	/^void mem_deinit(void)$/;"	f
mem_heap	vm/malloc/memlib.c	/^static char *mem_heap;     \/* Points to first byte of heap *\/ $/;"	v	file:
mem_heap_hi	vm/malloc/memlib.c	/^void *mem_heap_hi()$/;"	f
mem_heap_lo	vm/malloc/memlib.c	/^void *mem_heap_lo()$/;"	f
mem_heapsize	vm/malloc/memlib.c	/^size_t mem_heapsize() $/;"	f
mem_init	vm/malloc/memlib.c	/^void mem_init(void)$/;"	f
mem_max_addr	vm/malloc/memlib.c	/^static char *mem_max_addr; \/* Max legal heap addr plus 1*\/ $/;"	v	file:
mem_pagesize	vm/malloc/memlib.c	/^size_t mem_pagesize()$/;"	f
mem_reset_brk	vm/malloc/memlib.c	/^void mem_reset_brk()$/;"	f
mem_sbrk	vm/malloc/memlib.c	/^void *mem_sbrk(int incr) $/;"	f
mm_checkheap	vm/malloc/mm.c	/^void mm_checkheap(int verbose)  $/;"	f
mm_free	vm/malloc/mm.c	/^void mm_free(void *bp)$/;"	f
mm_init	vm/malloc/mm.c	/^int mm_init(void) $/;"	f
mm_malloc	vm/malloc/mm.c	/^void *mm_malloc(size_t size) $/;"	f
mm_realloc	vm/malloc/mm.c	/^void *mm_realloc(void *ptr, size_t size)$/;"	f
multvec	link/multvec.c	/^void multvec(int *x, int *y, $/;"	f
mutex	conc/ctime_ts.c	/^static sem_t mutex; \/* protects calls to ctime *\/$/;"	v	file:
mutex	conc/echo_cnt.c	/^static sem_t mutex;   \/* and the mutex that protects it *\/$/;"	v	file:
mutex	conc/sbuf.h	/^    sem_t mutex;       \/* Protects accesses to buf *\/$/;"	m	struct:__anon5
n	conc/sbuf.h	/^    int n;             \/* Maximum number of slots *\/$/;"	m	struct:__anon5
name	link/elfstructs.c	/^    int name;        \/* string table offset *\/ $/;"	m	struct:__anon2	file:
name1	vm/mm.h	/^    char *name1, *email1;$/;"	m	struct:__anon1
name2	vm/mm.h	/^    char *name2, *email2;$/;"	m	struct:__anon1
nelems_per_thread	conc/psum.c	/^long nelems_per_thread; \/* Number of elements summed by each thread *\/$/;"	v
new_vec	opt/vec.c	/^vec_ptr new_vec(long int len)$/;"	f
next	conc/rand.c	/^unsigned int next = 1;$/;"	v
nready	conc/echoservers.c	/^    int nready;       \/* number of ready descriptors from select *\/   $/;"	m	struct:__anon6	file:
offset	link/elfstructs.c	/^    int offset;     \/* offset of the reference to relocate *\/ $/;"	m	struct:__anon3	file:
open_clientfd	src/csapp.c	/^int open_clientfd(char *hostname, int port) $/;"	f
open_listenfd	src/csapp.c	/^int open_listenfd(int port) $/;"	f
parse_uri	netp/tiny/tiny.c	/^int parse_uri(char *uri, char *filename, char *cgiargs) $/;"	f
parseline	ecf/shellex.c	/^int parseline(char *buf, char **argv) $/;"	f
pid	ecf/signalprob0.c	/^pid_t pid;$/;"	v
place	vm/malloc/mm.c	/^static void place(void *bp, size_t asize)$/;"	f	file:
pool	conc/echoservers.c	/^} pool; \/\/line:conc:echoservers:endpool$/;"	t	typeref:struct:__anon6	file:
posix_error	src/csapp.c	/^void posix_error(int code, char *msg) \/* posix-style error *\/$/;"	f
printarray	mem/matmult/mm.c	/^void printarray(array a, int n)$/;"	f
printblock	vm/malloc/mm.c	/^static void printblock(void *bp) $/;"	f	file:
psum	conc/psum.c	/^long psum[MAXTHREADS];  \/* Partial sum computed by each thread *\/$/;"	v
ptr	conc/sharing.c	/^char **ptr;  \/* global variable *\/ \/\/line:conc:sharing:ptrdec$/;"	v
rand	conc/rand.c	/^int rand(void)$/;"	f
rand_r	conc/rand_r.c	/^int rand_r(unsigned int *nextp)$/;"	f
read_requesthdrs	netp/tiny/tiny.c	/^void read_requesthdrs(rio_t *rp) $/;"	f
read_set	conc/echoservers.c	/^    fd_set read_set;  \/* set of all active descriptors *\/$/;"	m	struct:__anon6	file:
ready_set	conc/echoservers.c	/^    fd_set ready_set; \/* subset of descriptors ready for reading  *\/$/;"	m	struct:__anon6	file:
rear	conc/sbuf.h	/^    int rear;          \/* buf[rear%n] is last item *\/$/;"	m	struct:__anon5
reserved	link/elfstructs.c	/^    char reserved;   \/* unused *\/  $/;"	m	struct:__anon2	file:
reset	mem/matmult/mm.c	/^void reset(array c, int n)$/;"	f
rio_buf	include/csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* internal buffer *\/$/;"	m	struct:__anon7
rio_bufptr	include/csapp.h	/^    char *rio_bufptr;          \/* next unread byte in internal buf *\/$/;"	m	struct:__anon7
rio_cnt	include/csapp.h	/^    int rio_cnt;               \/* unread bytes in internal buf *\/$/;"	m	struct:__anon7
rio_fd	include/csapp.h	/^    int rio_fd;                \/* descriptor for this internal buf *\/$/;"	m	struct:__anon7
rio_read	src/csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	src/csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	src/csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	src/csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	src/csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_t	include/csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon7
rio_writen	src/csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
rover	vm/malloc/mm.c	/^static char *rover;           \/* Next fit rover *\/$/;"	v	file:
run	mem/matmult/mm.c	/^double run(test_funct f, int n)$/;"	f
run	mem/mountain/mountain.c	/^double run(int size, int stride, double Mhz)$/;"	f
sbuf	conc/echoservert_pre.c	/^sbuf_t sbuf; \/* shared buffer of connected descriptors *\/$/;"	v
sbuf_deinit	conc/sbuf.c	/^void sbuf_deinit(sbuf_t *sp)$/;"	f
sbuf_init	conc/sbuf.c	/^void sbuf_init(sbuf_t *sp, int n)$/;"	f
sbuf_insert	conc/sbuf.c	/^void sbuf_insert(sbuf_t *sp, int item)$/;"	f
sbuf_remove	conc/sbuf.c	/^int sbuf_remove(sbuf_t *sp)$/;"	f
sbuf_t	conc/sbuf.h	/^} sbuf_t;$/;"	t	typeref:struct:__anon5
section	link/elfstructs.c	/^    char section;    \/* section header index, ABS, UNDEF, *\/ $/;"	m	struct:__anon2	file:
serve_dynamic	netp/tiny/tiny.c	/^void serve_dynamic(int fd, char *filename, char *cgiargs) $/;"	f
serve_static	netp/tiny/tiny.c	/^void serve_static(int fd, char *filename, int filesize) $/;"	f
set_vec_element	opt/vec.c	/^int set_vec_element(vec_ptr v, long int index, data_t val)$/;"	f
set_vec_length	opt/vec.c	/^void set_vec_length(vec_ptr v, long int newlen)$/;"	f
show_bytes	data/show-bytes.c	/^void show_bytes(byte_pointer start, int len) {$/;"	f
show_float	data/show-bytes.c	/^void show_float(float x) {$/;"	f
show_int	data/show-bytes.c	/^void show_int(int x) {$/;"	f
show_pointer	data/show-bytes.c	/^void show_pointer(void *x) {$/;"	f
show_twocomp	data/show-bytes.c	/^void show_twocomp() $/;"	f
sigchld_handler	conc/echoserverp.c	/^void sigchld_handler(int sig) \/\/line:conc:echoserverp:handlerstart$/;"	f
simple_show_a	data/show-bytes.c	/^void simple_show_a() {$/;"	f
simple_show_b	data/show-bytes.c	/^void simple_show_b() {$/;"	f
size	link/elfstructs.c	/^    int size;        \/* object size in bytes *\/ $/;"	m	struct:__anon2	file:
slots	conc/sbuf.h	/^    sem_t slots;       \/* Counts available slots *\/$/;"	m	struct:__anon5
srand	conc/rand.c	/^void srand(unsigned int seed)$/;"	f
string_leg	data/show-bytes.c	/^void string_leg() {$/;"	f
string_ueg	data/show-bytes.c	/^void string_ueg() {$/;"	f
sum	conc/psum.c	/^void *sum(void *vargp) $/;"	f
swap	link/swap.c	/^void swap() $/;"	f
symbol	link/elfstructs.c	/^    int symbol:24,  \/* symbol the reference should point to *\/ $/;"	m	struct:__anon3	file:
team	vm/mm.h	/^    char *team;$/;"	m	struct:__anon1
team_t	vm/mm.h	/^} team_t;$/;"	t	typeref:struct:__anon1
test	mem/mountain/mountain.c	/^void test(int elems, int stride) \/* The test function *\/$/;"	f
test_show_bytes	data/show-bytes.c	/^void test_show_bytes(int val) {$/;"	f
thread	conc/badcnt.c	/^void *thread(void *vargp) $/;"	f
thread	conc/echoservert.c	/^void *thread(void *vargp) $/;"	f
thread	conc/echoservert_pre.c	/^void *thread(void *vargp) $/;"	f
thread	conc/hello.c	/^void *thread(void *vargp) \/* thread routine *\/  \/\/line:conc:hello:beginthread$/;"	f
thread	conc/hellobug.c	/^void *thread(void *vargp) $/;"	f
thread	conc/norace.c	/^void *thread(void *vargp) $/;"	f
thread	conc/race.c	/^void *thread(void *vargp) $/;"	f
thread	conc/sharing.c	/^void *thread(void *vargp) $/;"	f
type	link/elfstructs.c	/^	type:8;     \/* relocation type *\/ $/;"	m	struct:__anon3	file:
type	link/elfstructs.c	/^    char type:4,     \/* data, func, section, or src file name (4 bits) *\/ $/;"	m	struct:__anon2	file:
unix_error	src/csapp.c	/^void unix_error(char *msg) \/* unix-style error *\/$/;"	f
value	link/elfstructs.c	/^    int value;       \/* section offset, or VM address *\/ $/;"	m	struct:__anon2	file:
vec_length	opt/vec.c	/^long int vec_length(vec_ptr v)$/;"	f
vec_ptr	opt/vec.h	/^} vec_rec, *vec_ptr;$/;"	t	typeref:struct:__anon4
vec_rec	opt/vec.h	/^} vec_rec, *vec_ptr;$/;"	t	typeref:struct:__anon4
x	link/dll.c	/^int x[2] = {1, 2};$/;"	v
x	link/main2.c	/^int x[2] = {1, 2};$/;"	v
y	link/dll.c	/^int y[2] = {3, 4};$/;"	v
y	link/main2.c	/^int y[2] = {3, 4};$/;"	v
z	link/dll.c	/^int z[2];$/;"	v
z	link/main2.c	/^int z[2];$/;"	v
